{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Template for EC2 with Static IP. Uses Load Balancer for Monitoring via HealthCheck along with other alerts",
  "Parameters": {
    "Vpc": {
      "Type": "String",
      "Description": "ID of the VPC in which to place the instance"
    },
    "SubnetId": {
      "Type": "String",
      "Description": "ID of the subnet in which to place the instance"
    },
    "ImageId": {
      "Type": "String",
      "Description": "The ID of the image to launch",
      "Default": "ami-id?"
    },
    "KeyPairName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255",
      "AllowedPattern": "[\\x20-\\x7E]*",
      "ConstraintDescription": "can contain only ASCII characters."
    },
    "PrimaryIPAddress": {
      "Type": "String",
      "Description": "Primary private IP. This must be a valid IP address for the subnet"
    },
    "InstanceType": {
      "Description": "EC2 instance type",
      "Type": "String",
      "ConstraintDescription": "must be a valid EC2 instance type"
    },
    "VolumeSize": {
      "Description": "Size of volume to attached to instance",
      "Type": "String",
      "Default": "50"
    },
    "VolumeType": {
      "Description": "Type of volume to attach to instance",
      "Type": "String",
      "Default": "gp2"
    },
    "Encrypted": {
      "Description": "Indicates whether the volume is encrypted",
      "Type": "String",
      "Default": "true"
    },
    "WebServerPort": {
      "Description": "TCP/IP port of the web server",
      "Type": "String",
      "Default": "80"
    },
    "HealthCheck": {
      "Description": "Health Check - just port 80 by default",
      "Type": "String",
      "Default": "HTTP:80/"
    },
    "SNSTopicARN": {
      "Description": "SNS Topic to send alerts to",
      "Type": "String",
      "Default": "255"
    },
    "SSHSG1": {
      "Description": "Security Group for incoming ssh",
      "Type": "String",
      "Default": "sg-id?"
    },
    "SSHSG2": {
      "Description": "Security Group for incoming ssh",
      "Type": "String",
      "Default": "sg-id?"
    },
    "IamInstanceProfile": {
      "Description": "The physical ID of an instance profile or a reference to an InstanceProfile resource.",
      "Type": "String"
    }
  },
  "Mappings": {},
  "Resources": {
    "ApplicationInstance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "ImageId": {
          "Ref": "ImageId"
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "KeyName": {
          "Ref": "KeyPairName"
        },
        "IamInstanceProfile": {
          "Ref": "IamInstanceProfile"
        },
        "Volumes": [
          {
            "VolumeId": {
              "Ref": "NewVolume"
            },
            "Device": "/dev/sdk"
          }
        ],
        "NetworkInterfaces": [
          {
            "NetworkInterfaceId": {
              "Ref": "Eth0"
            },
            "DeviceIndex": "0"
          }
        ]
      }
    },
    "Eth0": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "SubnetId": {
          "Ref": "SubnetId"
        },
        "PrivateIpAddress": {
          "Ref": "PrimaryIPAddress"
        },
        "GroupSet": [
          {
            "Ref": "ApplicationSecurityGroup"
          }
        ]
      }
    },
    "ApplicationSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable HTTP access on the configured port",
        "VpcId": {
          "Ref": "Vpc"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": {
              "Ref": "WebServerPort"
            },
            "ToPort": {
              "Ref": "WebServerPort"
            },
            "CidrIp": "3.0.0.0/8"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": {
              "Ref": "WebServerPort"
            },
            "ToPort": {
              "Ref": "WebServerPort"
            },
            "CidrIp": "10.0.0.0/8"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "SourceSecurityGroupId": {
              "Ref": "SSHSG1"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "SourceSecurityGroupId": {
              "Ref": "SSHSG2"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "3389",
            "ToPort": "3389",
            "SourceSecurityGroupId": {
              "Ref": "SSHSG1"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "3389",
            "ToPort": "3389",
            "SourceSecurityGroupId": {
              "Ref": "SSHSG2"
            }
          }
        ]
      }
    },
    "ApplicationSecurityGroupIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "ApplicationSecurityGroup"
        },
        "IpProtocol": "tcp",
        "FromPort": "80",
        "ToPort": "80",
        "SourceSecurityGroupId": {
          "Ref": "ApplicationSecurityGroup"
        }
      }
    },
    "NewVolume": {
      "Type": "AWS::EC2::Volume",
      "Properties": {
        "Size": {
          "Ref": "VolumeSize"
        },
        "AvailabilityZone": "us-east-1b",
        "Encrypted": {
          "Ref": "Encrypted"
        },
        "VolumeType": {
          "Ref": "VolumeType"
        }
      }
    }
  },
  "Outputs": {
    "InstanceId": {
      "Value": {
        "Ref": "ApplicationInstance"
      },
      "Description": "Instance Id of newly created instance"
    },
    "PrimaryPrivateIPAddress": {
      "Value": {
        "Fn::GetAtt": [
          "Eth0",
          "PrimaryPrivateIpAddress"
        ]
      },
      "Description": "Primary private IP address of Eth0"
    },
    "ApplicationStackSecurityGroup": {
      "Value": {
        "Fn::GetAtt": [
          "ApplicationSecurityGroup",
          "GroupId"
        ]
      },
      "Description": "Security group for this application stack"
    }
  }
}
