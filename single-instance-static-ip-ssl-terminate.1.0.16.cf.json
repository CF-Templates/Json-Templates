{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Single EC2 with static IP behind an SSL terminating ELB.",
  "Parameters": {
    "Vpc": {
      "Type": "String",
      "Description": "ID of the VPC in which to place the instance"
    },
    "SubnetId": {
      "Type": "String",
      "Description": "ID of the subnet in which to place the instance"
    },
    "ImageId": {
      "Type": "String",
      "Description": "The ID of the image to launch",
      "Default": "ami-0826b61e"
    },
    "KeyPairName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance.",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255",
      "AllowedPattern": "[\\x20-\\x7E]*",
      "ConstraintDescription": "can contain only ASCII characters."
    },
    "PrimaryIPAddress": {
      "Type": "String",
      "Description": "Primary private IP. This must be a valid IP address for the subnet."
    },
    "InstanceType": {
      "Description": "EC2 instance type",
      "Type": "String",
      "ConstraintDescription": "must be a valid EC2 instance type"
    },
    "Volume2Size": {
      "Description": "Size of volume to attached to instance",
      "Type": "String",
      "Default": "0"
    },
    "Volume2Type": {
      "Description": "Type of volume to attach to instance",
      "Type": "String",
      "Default": "gp2"
    },
    "Volume2Encrypted": {
      "Description": "Indicates whether the volume is encrypted",
      "Type": "String",
      "Default": "true"
    },
    "Volume2AZ": {
      "Description": "Availability zone for the volume",
      "Type": "String",
      "Default": "us-east-1b"
    },
    "Volume3Size": {
      "Description": "Size of volume to attached to instance",
      "Type": "String",
      "Default": "0"
    },
    "Volume3Type": {
      "Description": "Type of volume to attach to instance",
      "Type": "String",
      "Default": "gp2"
    },
    "Volume3Encrypted": {
      "Description": "Indicates whether the volume is encrypted",
      "Type": "String",
      "Default": "true"
    },
    "Volume3AZ": {
      "Description": "Availability zone for the volume",
      "Type": "String",
      "Default": "us-east-1b"
    },
    "LoadBalancerName": {
      "Description": "A name for the ELB",
      "Type": "String"
    },
    "InstancePort": {
      "Description": "Port on the backend server instances behind the ELB",
      "Type": "String"
    },
    "InstanceProtocol": {
      "Description": "Protocol on the backend server instances behind the ELB",
      "Type": "String",
      "Default": "HTTP"
    },
    "HealthCheck": {
      "Description": "Type of healthcheck the ELB should use",
      "Type": "String",
      "Default": "TCP:80"
    },
    "SNSTopicARN": {
      "Description": "SNS Topic to send alerts to",
      "Type": "String",
      "Default": "255"
    },
    "SSHSG1": {
      "Description": "Security Group for incoming ssh",
      "Type": "String",
      "Default": "sg-id?"
    },
    "SSHSG2": {
      "Description": "Security Group for incoming ssh",
      "Type": "String",
      "Default": "sg-id?"
    },
    "IamInstanceProfile": {
      "Description": "The physical ID of an instance profile or a reference to an InstanceProfile resource.",
      "Type": "String"
    },
    "SSLCertificateId": {
      "Description": "ID of the SSL certificate for the ELB",
      "Type": "String"
    },
    "AllowTrafficVPC": {
      "Description": "Allow HTTPS web traffic from entire VPC.",
      "Type": "String",
      "Default": "VpcId/19"
    }
  },
  "Mappings": {},
  "Conditions": {
    "CreateVolume2": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "Volume2Size"
            },
            "0"
          ]
        }
      ]
    },
    "CreateVolume3": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "Volume3Size"
            },
            "0"
          ]
        }
      ]
    }
  },
  "Resources": {
    "ApplicationInstance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "ImageId": {
          "Ref": "ImageId"
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "KeyName": {
          "Ref": "KeyPairName"
        },
        "IamInstanceProfile": {
          "Ref": "IamInstanceProfile"
        },
        "NetworkInterfaces": [
          {
            "NetworkInterfaceId": {
              "Ref": "Eth0"
            },
            "DeviceIndex": "0"
          }
        ]
      }
    },
    "Volume2": {
      "Type": "AWS::EC2::Volume",
      "Condition": "CreateVolume2",
      "Properties": {
        "Size": {
          "Ref": "Volume2Size"
        },
        "AvailabilityZone": {
          "Ref": "Volume2AZ"
        },
        "Encrypted": {
          "Ref": "Volume2Encrypted"
        },
        "VolumeType": {
          "Ref": "Volume2Type"
        }
      }
    },
    "MountPoint2": {
      "Type": "AWS::EC2::VolumeAttachment",
      "Condition": "CreateVolume2",
      "Properties": {
        "InstanceId": {
          "Ref": "ApplicationInstance"
        },
        "VolumeId": {
          "Ref": "Volume2"
        },
        "Device": "/dev/xvdf"
      }
    },
    "Volume3": {
      "Type": "AWS::EC2::Volume",
      "Condition": "CreateVolume3",
      "Properties": {
        "Size": {
          "Ref": "Volume3Size"
        },
        "AvailabilityZone": {
          "Ref": "Volume3AZ"
        },
        "Encrypted": {
          "Ref": "Volume3Encrypted"
        },
        "VolumeType": {
          "Ref": "Volume3Type"
        }
      }
    },
    "MountPoint3": {
      "Type": "AWS::EC2::VolumeAttachment",
      "Condition": "CreateVolume3",
      "Properties": {
        "InstanceId": {
          "Ref": "ApplicationInstance"
        },
        "VolumeId": {
          "Ref": "Volume3"
        },
        "Device": "/dev/xvdg"
      }
    },
    "Eth0": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "SubnetId": {
          "Ref": "SubnetId"
        },
        "PrivateIpAddress": {
          "Ref": "PrimaryIPAddress"
        },
        "GroupSet": [
          {
            "Ref": "ApplicationSecurityGroup"
          }
        ]
      }
    },
    "ApplicationSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable HTTP access on the configured port",
        "VpcId": {
          "Ref": "Vpc"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "3.0.0.0/8"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "3.0.0.0/8"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "10.0.0.0/8"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "10.0.0.0/8"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "SourceSecurityGroupId": {
              "Ref": "SSHSG1"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "SourceSecurityGroupId": {
              "Ref": "SSHSG2"
            }
          }
        ]
      }
    },
    "ApplicationSecurityGroupIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "ApplicationSecurityGroup"
        },
        "IpProtocol": "tcp",
        "FromPort": "80",
        "ToPort": "80",
        "SourceSecurityGroupId": {
          "Ref": "ApplicationSecurityGroup"
        }
      }
    },
    "ApplicationSecurityGroupIngress2": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "ApplicationSecurityGroup"
        },
        "IpProtocol": "tcp",
        "FromPort": "443",
        "ToPort": "443",
        "SourceSecurityGroupId": {
          "Ref": "ApplicationSecurityGroup"
        }
      }
    },
    "VPCSecurityGroupIngress1": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "ApplicationSecurityGroup"
        },
        "CidrIp": {
          "Ref": "AllowTrafficVPC"
        },
        "IpProtocol": "tcp",
        "FromPort": "80",
        "ToPort": "80"
      }
    },
    "VPCSecurityGroupIngress2": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "ApplicationSecurityGroup"
        },
        "CidrIp": {
          "Ref": "AllowTrafficVPC"
        },
        "IpProtocol": "tcp",
        "FromPort": "443",
        "ToPort": "443"
      }
    },
    "CPUAlarmHigh": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Alarm if CPU too high or metric disappears indicating instance is down",
        "AlarmActions": [
          {
            "Ref": "SNSTopicARN"
          }
        ],
        "InsufficientDataActions": [
          {
            "Ref": "SNSTopicARN"
          }
        ],
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "90",
        "ComparisonOperator": "GreaterThanThreshold",
        "Dimensions": [
          {
            "Name": "InstanceId",
            "Value": {
              "Ref": "ApplicationInstance"
            }
          }
        ]
      }
    },
    "TooManyUnhealthyHostsAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Alarm if there are any unhealthy hosts.",
        "Namespace": "AWS/ELB",
        "MetricName": "UnHealthyHostCount",
        "Statistic": "Average",
        "Dimensions": [
          {
            "Name": "LoadBalancerName",
            "Value": {
              "Ref": "ElasticLoadBalancer"
            }
          }
        ],
        "Period": "300",
        "EvaluationPeriods": "1",
        "Threshold": "0",
        "ComparisonOperator": "GreaterThanThreshold",
        "AlarmActions": [
          {
            "Ref": "SNSTopicARN"
          }
        ]
      }
    },
    "RequestLatencyAlarmHigh": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Alarm if request latency > ",
        "Namespace": "AWS/ELB",
        "MetricName": "Latency",
        "Dimensions": [
          {
            "Name": "LoadBalancerName",
            "Value": {
              "Ref": "ElasticLoadBalancer"
            }
          }
        ],
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "1",
        "Threshold": "1",
        "ComparisonOperator": "GreaterThanThreshold",
        "AlarmActions": [
          {
            "Ref": "SNSTopicARN"
          }
        ]
      }
    },
    "ElasticLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "LoadBalancerName": {
          "Ref": "LoadBalancerName"
        },
        "Subnets": [
          {
            "Ref": "SubnetId"
          }
        ],
        "Scheme": "internal",
        "SecurityGroups": [
          {
            "Ref": "ApplicationSecurityGroup"
          }
        ],
        "Instances": [
          {
            "Ref": "ApplicationInstance"
          }
        ],
        "Listeners": [
          {
            "LoadBalancerPort": "80",
            "Protocol": "HTTP",
            "InstancePort": {
              "Ref": "InstancePort"
            },
            "InstanceProtocol": {
              "Ref": "InstanceProtocol"
            }
          },
          {
            "LoadBalancerPort": "443",
            "Protocol": "HTTPS",
            "SSLCertificateId": {
              "Ref": "SSLCertificateId"
            },
            "InstancePort": {
              "Ref": "InstancePort"
            },
            "InstanceProtocol": {
              "Ref": "InstanceProtocol"
            }
          }
        ],
        "HealthCheck": {
          "Target": {
            "Ref": "HealthCheck"
          },
          "HealthyThreshold": "3",
          "UnhealthyThreshold": "5",
          "Interval": "30",
          "Timeout": "5"
        }
      }
    }
  },
  "Outputs": {
    "InstanceId": {
      "Value": {
        "Ref": "ApplicationInstance"
      },
      "Description": "Instance Id of newly created instance"
    },
    "PrimaryPrivateIPAddress": {
      "Value": {
        "Fn::GetAtt": [
          "Eth0",
          "PrimaryPrivateIpAddress"
        ]
      },
      "Description": "Primary private IP address of Eth0"
    },
    "ApplicationStackSecurityGroup": {
      "Value": {
        "Fn::GetAtt": [
          "ApplicationSecurityGroup",
          "GroupId"
        ]
      },
      "Description": "Security group for this application stack"
    },
    "ELBDNSName": {
      "Value": {
        "Fn::GetAtt": [
          "ElasticLoadBalancer",
          "DNSName"
        ]
      },
      "Description": "DNS name for the ELB"
    }
  }
}
